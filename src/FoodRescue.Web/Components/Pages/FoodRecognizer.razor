@page "/food-recognizer"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@inject HttpClient Http
@inject IConfiguration Configuration

@using System.Net.Mime
@using Azure.AI.OpenAI
@using OpenAI
@using OpenAI.Chat
@using System.ClientModel

@code {
    public enum ChatRole
    {
        User,
        Assistant,
        System
    }
}

<div class="page-container">
    <div class="prompt-editor">
        <label for="promptText" class="prompt-label">Polecenie (możesz edytować):</label>
        <InputTextArea id="promptText"
                       class="prompt-textarea"
                       placeholder="Wpisz polecenie do analizy obrazu..."
                       @bind-Value="promptText"
                       rows="3" />
        <div class="prompt-actions">
            <button type="button"
                    class="analyze-button"
                    @onclick="OnAnalyzeClick"
                    disabled="@fileIsMissing">
                @if (isLoading)
                {
                    <span>Analizuję...</span>
                }
                else
                {
                    <span>Analizuj obraz</span>
                }
            </button>
            @if (selectedFile is null)
            {
                <span class="hint-text">Najpierw wybierz obraz poniżej.</span>
            }
        </div>
    </div>

    <div>
        <InputFile OnChange="HandleFileSelected" class="file-input" id="fileInput" />
        <label for="fileInput" class="drop-zone-label">
            @if (!string.IsNullOrEmpty(imagePreviewUrl))
            {
                <img src="@imagePreviewUrl" class="image-preview" alt="Podgląd obrazu" />
            }            
        </label>
    </div>

    @if (isLoading)
    {
        <div class="status-message loading-message">
            <div class="spinner"></div>
            <p>Analizuję obraz, proszę czekać...</p>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="status-message error-message">
            <p><strong>Błąd:</strong> @errorMessage</p>
        </div>
    }

    @if (!string.IsNullOrEmpty(imageCaption))
    {
        <div class="results-container">
            <h4>Opis obrazu:</h4>
            <p>@imageCaption</p>
        </div>
    }

</div>

@code {
    private const string DefaultPrompt = "Wypisz listę jedzenia i jego ilości widoczne na obrazku. Odpowiedz zwięźle po polsku.";
    private string promptText = DefaultPrompt;

    private IBrowserFile? selectedFile;
    private string? imagePreviewUrl;
    private bool isLoading = false;
    private string? errorMessage;
    private string? imageCaption;
    private bool fileIsMissing = true;
    private byte[] imageBytes;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {       
        errorMessage = null;
        imageCaption = null;

        var file = e.File;
        selectedFile = file;
        fileIsMissing = false;

        await using var imageStream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024);
        using var ms = new MemoryStream();
        await imageStream.CopyToAsync(ms);
        imageBytes = ms.ToArray();
        imagePreviewUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(imageBytes)}";
    }

    private async Task OnAnalyzeClick()
    {
        errorMessage = null;
        imageCaption = null;

        if (selectedFile is null)
        {
            errorMessage = "Najpierw wybierz obraz do analizy.";
            return;
        }

        await ProcessAndAnalyzeImage(selectedFile);
    }

    private async Task ProcessAndAnalyzeImage(IBrowserFile file)
    {
        if (string.IsNullOrWhiteSpace(file.ContentType) || !file.ContentType.Contains("image", StringComparison.OrdinalIgnoreCase))
        {
            errorMessage = "Wybrany plik nie jest obrazem.";
            return;
        }

        isLoading = true;

        try
        {           

            // Load Azure OpenAI configuration
            var endpointValue = Configuration["AzureAiEndpoint"];
            var subscriptionKey = Configuration["AzureAiSubscriptionKey"];
            var deploymentName = Configuration["AzureAiDeploymentName"];

            if (string.IsNullOrWhiteSpace(endpointValue) ||
                string.IsNullOrWhiteSpace(subscriptionKey) ||
                string.IsNullOrWhiteSpace(deploymentName))
            {
                errorMessage = "Brakuje konfiguracji Azure AI (Endpoint, SubscriptionKey lub DeploymentName).";
                return;
            }

            // Build ChatClient for Azure OpenAI (deploymentName is your model deployment)
            // Note: ChatClient should be instantiated from an AzureOpenAIClient instance for Azure OpenAI services.
            var azureOpenAIClient = new AzureOpenAIClient(
                new Uri(endpointValue),
                new ApiKeyCredential(subscriptionKey)
            );
            ChatClient client = azureOpenAIClient.GetChatClient(deploymentName);

            // Create a multimodal user message: text + image (binary)
            var textToSend = string.IsNullOrWhiteSpace(promptText) ? DefaultPrompt : promptText;

            var userMessage = new UserChatMessage([
                ChatMessageContentPart.CreateTextPart(textToSend),
                ChatMessageContentPart.CreateImagePart(new BinaryData(imageBytes), file.ContentType)
            ]);

            // Send request and extract the text response
            ChatCompletion completion = await client.CompleteChatAsync(new ChatMessage[] { userMessage });

            // For more robust handling, check the completion before accessing its properties
            if (completion != null && completion.Content != null && completion.Content.Any())
            {
                imageCaption = completion.Content.First().Text.Trim();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Wystąpił wyjątek: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
